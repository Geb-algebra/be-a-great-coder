// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id              String  @id @default(cuid())
    name            String  @unique
    googleProfileId String? @unique

    expectedChallenge String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authenticators  Authenticator[]
    Money           Money?
    IngredientStock IngredientStock[]
    ProposedProblem ProposedProblem[]
    Robot           Robot[]
    CurrentTurn     CurrentTurn?
    ProductStock    ProductStock[]

    @@index([googleProfileId], name: "user_google_profile_id")
    @@index([name], name: "user_name")
}

model Authenticator {
    credentialID         String   @id
    name                 String?
    user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId               String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    // 0: false, 1: true
    // Dont use Boolean because remix-auth-webauthn uses 0 and 1
    credentialBackedUp   Int
    transports           String
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    @@index([credentialID], name: "authenticator_credential_id")
    @@index(fields: [userId], name: "authenticator_user_id")
}

model AtCoderAPIFetchLog {
    id        String   @id @default(cuid())
    endpoint  String
    timestamp DateTime @default(now())
    status    Int
}

model Problem {
    id              String            @id
    title           String
    difficulty      Int
    ProposedProblem ProposedProblem[]
}

model Money {
    id        String   @id @default(cuid())
    amount    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId], name: "money_user_id")
}

model IngredientStock {
    id             String   @id @default(cuid())
    ingredientName String
    amount         Int
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId         String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@index([userId], name: "ingredient_stock_user_id")
}

model ProductStock {
    id          String   @id @default(cuid())
    productName String
    amount      Int
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([userId], name: "product_stock_user_id")
}

model Robot {
    id              String   @id @default(cuid())
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId          String   @unique
    efficiencyLevel Int
    qualityLevel    Int
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model ProposedProblem {
    id                     String    @id @default(cuid())
    problem                Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    problemId              String
    user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId                 String
    createdAt              DateTime  @default(now())
    updatedAt              DateTime  @updatedAt
    solvedAt               DateTime?
    finishedAt             DateTime?
    explanationDisplayedAt DateTime?
    rewardReceivedAt       DateTime?

    @@index([userId], name: "proposed_problem_user_id")
    @@index([problemId])
}

model CurrentTurn {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String   @unique
    turn      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}
