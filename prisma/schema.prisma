// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model User {
    id              String  @id @default(cuid())
    name            String  @unique
    googleProfileId String? @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authenticators   Authenticator[]
    IngredientStocks IngredientStock[]
    Researches       Research[]
    CurrentTurn      CurrentTurn?
    Assets           Assets?

    @@index([googleProfileId], name: "user_google_profile_id")
    @@index([name], name: "user_name")
}

model Authenticator {
    credentialID         String   @id
    name                 String?
    user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId               String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    // 0: false, 1: true
    // Dont use Boolean because remix-auth-webauthn uses 0 and 1
    credentialBackedUp   Int
    transports           String
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
}

model AtCoderAPIETag {
    endpoint  String   @id
    hash      String
    updatedAt DateTime @updatedAt
}

model Problem {
    id         String     @id
    title      String
    difficulty Int
    Researches Research[]

    @@index([difficulty], name: "problem_difficulty")
}

model Assets {
    id        String   @id @default(cuid())
    cash      Int
    battery   Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model IngredientStock {
    id             String   @id @default(cuid())
    ingredientName String
    amount         Int
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Research {
    id                       String    @id @default(cuid())
    problem                  Problem   @relation(fields: [problemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    problemId                String
    user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                   String
    createdAt                DateTime  @default(now())
    updatedAt                DateTime  @updatedAt
    startedAt                DateTime?
    submittedAt              DateTime?
    solvedAt                 DateTime?
    finishedAt               DateTime?
    answerShownAt            DateTime?
    rewardReceivedAt         DateTime?
    batteryCapacityIncrement Int?
    performanceIncrement     Int?
}

model CurrentTurn {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    turn      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
